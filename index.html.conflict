<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta name="description" content="Refereance architecture for large scale JavaScript development. It is a collection of product engineering patterns and some solid integrations of industry leading JavaScript libraries" />
		<meta name="keywords" content="reference architecture,boilerplate code,modularity,routing,requirejs,JavaScript,jQuery,controllers" />
		<meta name="robots" content="all" />
		<meta name="language" content="en-us" />
		<link rel="icon" href="favicon.ico" type="image/x-icon">
		<link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
		<title>Boilerplate | JavaScript Reference Architecture</title>
		<link rel="stylesheet" type="text/css" href="css/Desktop.css">
		<link rel="stylesheet" type="text/css" href="css/Grids.Min.css">
		<script language="javascript" src="js/jquery-1.7.2.min.js"></script>
		<script language="javascript" src="js/main.js"></script>
		<script type="text/javascript">
			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-33996853-1']);
			_gaq.push(['_setDomainName', 'boilerplatejs.org']);
			_gaq.push(['_setAllowLinker', true]);
			_gaq.push(['_trackPageview']);

			(function() {
				var ga = document.createElement('script');
				ga.type = 'text/javascript';
				ga.async = true;
				ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
				var s = document.getElementsByTagName('script')[0];
				s.parentNode.insertBefore(ga, s);
			})();

		</script>
	</head>
	<body>
		<div class="header">
			<div class="yui3-g">
				<div class="yui3-u-1-3">
					<div class="logo"><img src="images/logo.jpg">
					</div>
				</div>
				<div class="yui3-u-2-3">
					<ul class="topMenu">
						<li>
							|<a href="https://github.com/ectechno/boilerplatejs" target="_blank" onClick="_gaq.push(['_trackEvent', 'HomePage', 'AccessCode', 'Access Boilerplate Code']);">FORK US ON github</a>
						</li>
						<li style="display:none">
							|<a href="#">VIEW documentaion</a>
						</li>
					</ul>
				</div>
			</div>
		</div>
		<div class="content">
			<div class="yui3-g">
				<div class="yui3-u-17-24">
					<div class="leftPanel">
						<div class="imageRoller"><img src="images/headerImg3.jpg">
						</div>
						<a href="./samples/productsuite/index.html#sales" target="_blank" onClick="_gaq.push(['_trackEvent', 'HomePage', 'ViewExample', 'View Boilerplate Generic Example']);"><div class="starButton"></div></a>
						<div class="actionButtons">
							<a href="./samples/productsuite/index.html#sales" target="_blank" onClick="_gaq.push(['_trackEvent', 'HomePage', 'ViewExample', 'View Boilerplate Generic Example']);"><img src="images/btnExample.png" alt="view live example"></a>
							<a href="https://github.com/ectechno/boilerplatejs" target="_blank" onClick="_gaq.push(['_trackEvent', 'HomePage', 'AccessCode', 'Access Boilerplate Code']);"><img src="images/btnDownload.png" alt="download the latest code"></a>
						</div>
						<div class="largeTitle">
							What is BoilerplateJS?
						</div>
						<div class="meduimText ">
							BoilerplateJS is your <span class="redColorText">reference architecture</span> to take
							the pain out of <span class="redColorText">large scale JavaScript</span> development. BoilerplateJS
							is a collection of <span class="redColorText">product engineering patterns</span>, and some solid
							integrations of <span class="redColorText">industry-leading JavaScript libraries</span>.
							<br />
							<br />
							BoilerplateJS <span class="redColorText">does not reinvent</span> for conserns such as MVC or Routing. It only
							defines architectural best practices and demonstrates sample code for complex JS development.
							<span class="redColorText">Use your prefered libraries</span> if you do not like the libraries shiped by default.
							<br />
							<br />
						</div>
						<div class="largeTitle">
							Should I use it?
						</div>
						<div class="meduimText">

							BoilerplateJS let's you not get vendor locked. Remember, it's just your own code to place the right architecture
							for integrating your favourite libraries.
							<br/>
							<br />
							With BoilerplateJS we address many of the critical concerns in large-scale JavaScript development.
							Have a look below, if these are important concerns to you, then we are a matching community!
							<br/>
							<br />
						</div>
						<ul id="accordion" class="panel">
							<li class="itemSelectedHeader" >
								<a href="#" class="clickHeader"> <span class="emp">Solution Structure</span><span class="textSeperator">|</span> How should I organize my solution structure?</a>
								<ul class="content">
									<li><img  class="floatLeft" src="./images/content/solution-structure.png" height="230px" />
										Large scale JavaScript development involves many differnt file
										types and formats to deal with. Some of it is your product code and some may be for unit tests, build scripts,
										thirdparty libs, etc.
										<br/>
										<br/>

<<<<<<< HEAD
										Solution structure complexity may not stop there. Your product code needs a structure that
										makes your development extensible, flexible and modular. In addition, you will need your tools such as
										for document generation, JavaScript optimization properly attached to the solution structure.
										Similarly your unit tests will need be placed with access to the source files and related
										thirdparty libraries too.
										<br/>
										<br/>
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/How-should-I-organize-my-solution-structure%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Dependency Management</span><span class="textSeperator">|</span> How do I do modular object oriented programming with plain JavaScript?</a>
								<ul class="content">
									<li>
										<img  class="floatRight" src="./images/content/dependency-management.png" width="400" /> Being a dynamic multi-paradigm language, JavaScript
										has its best use when its functional power is blended with some essence of object orientation.
=======
									Solution structure complexity may not stop there. Your product code needs a structure that
									makes your development extensible, flexible and modular. In addition, you will need your tools such as
									for document generation, javascript optimization properly attached to the solution structure.
									Similarly your unit tests will need be placed with access to the source files and related
									thirdparty libraries too.
									<br/>
									<br/>
									<div class="moreLink">
										<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/How-should-I-organize-my-solution-structure%3F" target="_blank">Read More</a>
									</div>
								</li>
							</ul>
						</li>
						<li class="header">
							<a href="#" class="clickHeader"> <span class="emp">Dependency Management</span><span class="textSeperator">|</span> How do I do modular object oriented programming with plain javascript?</a>
							<ul class="content">
								<li>
									<img  class="floatRight" src="./images/content/dependency-management.png" width="400" /> Being a dynamic multi-paradigm language, javascript
									has its best use when its functional power is blended with some essence of object orientation.
									<br/>
									<br/>
									Gone are the days we coded JS in to a single massive script file. BoilerplateJS
									modularizes the code in to logical parts that are compliant with
									asynchronous module definition API (AMD API) allowing unit encapsulation and dependency management.
									<br/>
									<br/>
									In addition, BoilerplateJS code demonstrates best practices for familiar OO programming that
									allow creation of classes containing static, public and private spaces (you will find some
									unit tests demonstrating use of OO patterns under 'tests' directory). By default Boilerplate uses
									<a href="http://requirejs.org"> requirejs </a> as the underline AMD loader.
									<br/>
									<div class="moreLink">
										<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/Can-I-do-modular-object-oriented-programming-with-plain-javascript%3F" target="_blank">Read More</a>
									</div>
								</li>
							</ul>
						</li>
						<li class="header">
							<a href="#" class="clickHeader"> <span class="emp">Product Modules </span><span class="textSeperator">|</span> My product suite has multiple product modules, how should I go about it?</a>
							<ul class="content">
								<li>
									<img  class="floatLeft" src="./images/content/product-suite.png" height="300px" />
									Building software products is different from building a web-application or a website. Products
									are commonly a part of a larger product suite where Each product module containing
									sub modules for its different functional areas. Likewise depending on the
									complexity, multiple levels of sub-modularization is not uncommon.
									<br/>
									<br/>
									'Boiler.Context' is one of the most important classes in BoilerplateJS reference architecture.
									A 'Context' represents an self contained and controlled facade for all resource needs of
									a module. Each context is self contained and protected, but also with the ability
									to interact with other contexts in a controlled manner (e.g. through events).
									<br/>
									<br/>
									Contexts can be nested in a way to create a parent-child association to form a context tree.
									This is a common topology for product suites where a global context
									becoming the parent context and product modules owning independent child contexts of their own.
									Associated contexts will posses limited knowledge of each other, for example for inheriting configuration settings
									from the parent.
									<div class="moreLink">
										<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/My-product-suit-has-multiple-product-modules,-how-should-I-go-about-it%3F" target="_blank">Read More</a>
									</div>
								</li>
							</ul>
						</li>
						<li class="header">
							<a href="#" class="clickHeader"> <span class="emp">UI Components </span><span class="textSeperator">|</span> UI layer is going to be complex in my product. How should I design my components?</a>
							<ul class="content">
								<li>
									<div>
										<img  class="floatRight" src="./images/content/ui-component.png" />

										It might be just the UI that makes or break your product in the market.
										BoilerplateJS keeps view layer open for the developers to mix
										and match different UI libraries as required. By default it ships with
										knockoutJS and jQuery, that are sufficient for simple UI needs.
>>>>>>> 3688a06036bc657af3f8d8330a8e0bca6422d442
										<br/>
										<br/>
										Gone are the days we coded JS in to a single massive script file. BoilerplateJS
										modularizes the code in to logical parts that are compliant with
										asynchronous module definition API (AMD API) allowing unit encapsulation and dependency management.
										<br/>
										<br/>
<<<<<<< HEAD
										In addition, BoilerplateJS code demonstrates best practices for familiar OO programming that
										allow creation of classes containing static, public and private spaces (you will find some
										unit tests demonstrating use of OO patterns under 'tests' directory). By default Boilerplate uses
										<a href="http://requirejs.org"> requirejs </a> as the underline AMD loader.
										<br/>
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/Can-I-do-modular-object-oriented-programming-with-plain-javascript%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Product Modules </span><span class="textSeperator">|</span> My product suite has multiple product modules, how should I go about it?</a>
								<ul class="content">
									<li>
										<img  class="floatLeft" src="./images/content/product-suite.png" height="300px" />
										Building software products is different from building a web-application or a website. Products
										are commonly a part of a larger product suite where Each product module containing
										sub modules for its different functional areas. Likewise depending on the
										complexity, multiple levels of sub-modularization is not uncommon.
										<br/>
										<br/>
										'Boiler.Context' is one of the most important classes in BoilerplateJS reference architecture.
										A 'Context' represents an self contained and controlled facade for all resource needs of
										a module. Each context is self contained and protected, but also with the ability
										to interact with other contexts in a controlled manner (e.g. through events).
										<br/>
										<br/>
										Contexts can be nested in a way to create a parent-child association to form a context tree.
										This is a common topology for product suites where a global context
										becoming the parent context and product modules owning independent child contexts of their own.
										Associated contexts will posses limited knowledge of each other, for example for inheriting configuration settings
										from the parent.
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/My-product-suit-has-multiple-product-modules,-how-should-I-go-about-it%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">UI Components </span><span class="textSeperator">|</span> UI layer is going to be complex in my product. How should I design my components?</a>
								<ul class="content">
									<li>
										<div>
											<img  class="floatRight" src="./images/content/ui-component.png" />
=======
										BoilerplateJS encourage to make your UI components self contained as much as possible.
										Following is a typical structure of a BoilerplateJS UI component:
									</div>
									<div>
>>>>>>> 3688a06036bc657af3f8d8330a8e0bca6422d442

											It might be just the UI that makes or break your product in the market.
											BoilerplateJS keeps view layer open for the developers to mix
											and match different UI libraries as required. By default it ships with
											knockoutJS and jQuery, that are sufficient for simple UI needs.
											<br/>
											<br/>
											The important UI class in Boilerplate is 'Boiler.ViewTemplate'. This class assist
											you to deal with 'V' (out of MVx architecture) related aspects such as
											template attachment to DOM, CSS attachment to DOM, localization, etc. Vx
											layers of MVx architecture is open for developers to select among any MVC,
											MVVM, MVP framework.
											<br/>
											<br/>
											BoilerplateJS encourage to make your UI components self contained as much as possible.
											Following is a typical structure of a BoilerplateJS UI component:
										</div>
										<div>

											<table class="gridtable">
												<tr>
													<td>assets (folder) </td>
													<td>Contains any assets such as images, animations, etc that are a part of your UI component</td>
												</tr>
												<tr>
													<td>nls (folder)</td>
													<td>Localization resources for different locales that are needed by your UI component </td>
												</tr>
												<tr>
													<td>style.css</td>
													<td>Styles that are not a part of the overall theme, but specific to the UI component </td>
												</tr>
												<tr>
													<td>view.html</td>
													<td>HTML view template for your UI component. Boiler classes will help to attach this to DOM</td>
												</tr>
												<tr>
													<td>viewmodel.js</td>
													<td>This is the logic/code behind (MVVM here). It could also be controller.js incase of MVC</td>
												</tr>
												<tr>
													<td>component.js</td>
													<td>Encapsulation of all above. Outside world interacts with the component via this class.</td>
												</tr>
											</table>

										</div>
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/UI-layer-is-going-to-be-complex-in-my-product.-How-should-I-design-my--UI-components%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"><span class="emp">Event Driven Messaging </span><span class="textSeperator">|</span> How should my loosely coupled components interact?</a>
								<ul class="content">
									<li>
										<img  class="floatLeft" src="./images/content/event-mediation.png" height="180px"/>
										Architecture of BoilerplateJS suggests modules and UI components to be self contained
										and loosely coupled. But in complex applications, it is usual to have some components interacting each other.
										BoilerplateJS recommend event based pub-sub mechanism for such communication needs.

<<<<<<< HEAD
=======
									</div>
									<div class="moreLink">
										<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/UI-layer-is-going-to-be-complex-in-my-product.-How-should-I-design-my--UI-components%3F" target="_blank">Read More</a>
									</div>
								</li>
							</ul>
						</li>
						<li class="header">
							<a href="#" class="clickHeader"><span class="emp">Event Driven Messaging </span><span class="textSeperator">|</span> How should my loosely coupled components interact?</a>
							<ul class="content">
								<li>
									<img  class="floatLeft" src="./images/content/event-mediation.png" height="180px"/>
									Architecture of BoilerplateJS suggests modules and UI components to be self contained
									and loosely coupled. But in complex applications, it is usual to have some components interacting each other.
									BoilerplateJS recommend event based pub-sub mechanism for such communication needs.

									<br/>
									<br/>
									'Boiler.Context' exposes a pair of mediating methods 'listen' &amp; 'notify' that enables
									components to interact.	All contexts in the same context hierachy share a single mediator. This means
									UI components in a particular context hierachy are able to communicate, although they are
									not a part of the same context.
									<div class="moreLink">
										<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/How-should-my-loosely-coupled-modules-interact-with-each-other%3F" target="_blank">Read More</a>
									</div>
								</li>
							</ul>
						</li>
						<li class="header">
							<a href="#" class="clickHeader"> <span class="emp">Controller Routing </span><span class="textSeperator">|</span> I'm building a single page app. What about bookmarking and browser history?</a>
							<ul class="content">
								<li>
									<div>
										It is a common requirement to have your functionality be directly accessible via bookmarked URLs.
										But remember, it might not be trivial to support bookmarking, history, back/forward buttons
										later, unless planed in the initial architecture.
									</div>
									<br/>
									<div><img  class="floatRight" src="./images/content/url-routing.png" width="420" /> BoilerplateJS’s module structure inherently supports bookmarking and browser history
										thanks to its UrlController class. Your components can register themselves to a URL
										controller by specifying the URL pattern, on which they want to be activated upon.
>>>>>>> 3688a06036bc657af3f8d8330a8e0bca6422d442
										<br/>
										<br/>
										'Boiler.Context' exposes a pair of mediating methods 'listen' &amp; 'notify' that enables
										components to interact.	All contexts in the same context hierachy share a single mediator. This means
										UI components in a particular context hierachy are able to communicate, although they are
										not a part of the same context.
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/How-should-my-loosely-coupled-modules-interact-with-each-other%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Controller Routing </span><span class="textSeperator">|</span> I'm building a single page app. What about bookmarking and browser history?</a>
								<ul class="content">
									<li>
										<div>
											It is a common requirement to have your functionality be directly accessible via bookmarked URLs.
											But remember, it might not be trivial to support bookmarking, history, back/forward buttons
											later, unless planed in the initial architecture.
										</div>
										<br/>
										<div><img  class="floatRight" src="./images/content/url-routing.png" width="420" /> BoilerplateJS’s module structure inherently supports bookmarking and browser history
											thanks to its UrlController class. Your components can register themselves to a URL
											controller by specifying the URL pattern, on which they want to be activated upon.
											<br/>
											<br/>
											In addition to UrlController, BoilerplateJS also provides the option of activating
											components within specific DOM elements using the DomController. This is very
											relavant when you want your components to be embedded in a third-party website
											or a portal, just as Facebook-Like box may do.
										</div>
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/I'm-building-a-single-page-app.-What-about-bookmarking-and-browser--history%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Unit Testing </span><span class="textSeperator">|</span> I'm writing durable product code. Can I UnitTest my JavaScript code?</a>
								<ul class="content">
									<li>
										<img  class="floatRight" src="./images/content/unit-testing.png" height="170px" /> Test driven development encourages you to write less coupled, cohesive code that
										is easy to change. BoilerplateJS comes with a ready to use integrated Unit Testing facilities
										using QUnit.
										<br/>
										<br/>
										We have taken the initiative and most of the core classes in the platform are
										fully covered with unit tests. Our test suite allows you to isolate modules, mock dependencies
										and integrate other unit testing best practices such as stubbing and assertions.
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/I'm-writing-durable-product-code.-Can-I-UnitTest-my-javascript-code%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Localization </span><span class="textSeperator">|</span> should I provide native language support for my users?</a>
								<ul class="content">
									<li>
										<img  class="floatLeft" src="./images/content/localizations.png" width="250px" /> In JavaScript based single page applications, UI rendering completely happens on the browser.
										Therefore it makes very much sense that the localization of UI components should also happens on the
										browser. BoilerplateJS lets you define localization resources per UI component, enabling you to
										structure and manage resource files effectively.
										<div class="moreLink">
											<a href="https://github.com/ectechno/nutcocojs/wiki/How-should-I-provide-native-language-support-for-my-users%3F" class="more" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Document Generation </span><span class="textSeperator">|</span> How can I maintain a documentation for my product?</a>
								<ul class="content">
									<li>
										<img  class="floatLeft" src="./images/content/annotated-method.png" border="1" height="99px" /> Having documentation for your product adds maintainability and makes debugging processes easier. But when the source is modified with the changing requirements developers have to put an extra effort on maintaining the documentation
										<br/>
										<br/>
										BoilerplateJS ships YUIDoc as a 3rd party tool for document generation using the comments in the source
										<br/>
										<br/>
										All you have to do is to comment the source code using few annotations. Then run the batch file document.bat (On linux run ‘document.sh’) under the documentation directory. This will generate the documentation as a html web page which is ready to publish
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/I'm-writing-durable-product-code.-Can-I-UnitTest-my-javascript-code%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
							<li class="header">
								<a href="#" class="clickHeader"> <span class="emp">Optimized Deployment </span><span class="textSeperator">|</span> How can I optimize my code ready for deployment?</a>
								<ul class="content">
									<li>
										<img  class="floatRight" src="./images/content/optimizer.png" style="height:150px"/> JavaScript can make your application dynamic and active however large number
										of files and file sizes being downloaded into the browser can lead to pages
										becoming unresponsive. To avoid this from taking place BoilerplateJS provides
										the RequireJS optimizer as a tool in the framework which will combine related
										scripts and minify the JavaScript code to provide better performance.
										<br/>
										<br/>
										After optimization only a single file will be loaded as the application and all
										the files will be compressed. Your optimized code will look like this:
										<br/>
										<div class="moreLink">
											<a class="more" href="https://github.com/ectechno/nutcocojs/wiki/How-should-my-loosely-coupled-modules-interact-with-each-other%3F" target="_blank">Read More</a>
										</div>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</div>
				<div class="yui3-u-7-24">
					<br />
					<br />
					<br />
					<br />
					<div class="watchVideosButton"></div>
					<div class="rightPanel" >
						<div class="roundedBox">
							<a href="http://www.youtube.com/watch?v=x5hwIpxR3j8" target="_blank"><img src="images/video-hello-world.jpg" width="235" height="170"/></a><span class="redTtile">Boiling a HelloWorld</span>&nbsp;[10 mins video]
							<br />
							<br />
							<br />
							<br />
							<a href="http://www.youtube.com/watch?v=EcRAseDjdnM" target="_blank"><img src="images/video-solution-structuring.png" width="235" height="170"/></a><span class="redTtile">Structuring your Solution</span>&nbsp;[4 mins video]
							<br />
							<br />
							<a href="#" class="more" style="display:none">All BoilerplateJS Videos</a>
						</div>
						<br />
						<br />
						<div class="roundedBox" style="display: none">
							Twitter Feed goes here
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="footer" >
			<div class="yui3-g" style="display:none">
				<div class="yui3-u-1-3"><img src="images/footerImg1.jpg">
				</div>
				<div class="yui3-u-1-3"><img src="images/footerImg2.jpg" class="footerRightImage">
				</div>
				<div class="yui3-u-1-3"><img src="images/footerImg3.jpg" class="footerRightImage">
				</div>
			</div>
			<div class="footerText">
				Released under the MIT license.
			</div>
		</div>
	</body>
</html>
